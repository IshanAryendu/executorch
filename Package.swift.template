// swift-tools-version:5.9
/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

import PackageDescription

let version = "__VERSION__"
let url = "https://ossci-ios.s3.amazonaws.com/executorch/"
let debug_suffix = "_debug"
let dependencies_suffix = "_with_dependencies"

func deliverables(_ dict: [String: [String: Any]]) -> [String: [String: Any]] {
  let expanded: [String: [String: Any]] = dict.reduce(into: [:]) { result, pair in
    let (key, value) = pair
    result[key] = value
    result[key + debug_suffix] = value
  }
  let processed: [String: [String: Any]] = expanded.reduce(into: [:]) { result, pair in
    let (key, value) = pair
    var newValue = value
    if key.hasSuffix(debug_suffix) {
      for (k, v) in value where k.hasSuffix(debug_suffix) {
        let trimmed = String(k.dropLast(debug_suffix.count))
        newValue[trimmed] = v
      }
    }
    result[key] = newValue.filter { !$0.key.hasSuffix(debug_suffix) }
  }
  return processed
}

let products = deliverables([
  "backend_coreml": [
    "sha256": "__SHA256_backend_coreml__",
    "sha256" + debug_suffix: "__SHA256_backend_coreml_debug__",
    "frameworks": [
      "Accelerate",
      "CoreML",
    ],
    "libraries": [
      "sqlite3",
    ],
  ],
  "backend_mps": [
    "sha256": "__SHA256_backend_mps__",
    "sha256" + debug_suffix: "__SHA256_backend_mps_debug__",
    "frameworks": [
      "Metal",
      "MetalPerformanceShaders",
      "MetalPerformanceShadersGraph",
    ],
  ],
  "backend_xnnpack": [
    "sha256": "__SHA256_backend_xnnpack__",
    "sha256" + debug_suffix: "__SHA256_backend_xnnpack_debug__",
    "targets": [
      "threadpool",
    ],
  ],
  "executorch": [
    "sha256": "__SHA256_executorch__",
    "sha256" + debug_suffix: "__SHA256_executorch_debug__",
    "libraries": [
      "c++",
    ],
  ],
  "kernels_custom": [
    "sha256": "__SHA256_kernels_custom__",
    "sha256" + debug_suffix: "__SHA256_kernels_custom_debug__",
  ],
  "kernels_optimized": [
    "sha256": "__SHA256_kernels_optimized__",
    "sha256" + debug_suffix: "__SHA256_kernels_optimized_debug__",
    "frameworks": [
      "Accelerate",
    ],
    "targets": [
      "threadpool",
    ],
  ],
  "kernels_portable": [
    "sha256": "__SHA256_kernels_portable__",
    "sha256" + debug_suffix: "__SHA256_kernels_portable_debug__",
  ],
  "kernels_quantized": [
    "sha256": "__SHA256_kernels_quantized__",
    "sha256" + debug_suffix: "__SHA256_kernels_quantized_debug__",
  ],
])

let targets = deliverables([
  "threadpool": [
    "sha256": "__SHA256_threadpool__",
    "sha256" + debug_suffix: "__SHA256_threadpool_debug__",
  ],
])

var packageTargets: [Target] = []
for (key, value) in targets {
  packageTargets.append(
    .binaryTarget(
      name: key,
      url: "\(url)\(key)-\(version).zip",
      checksum: value["sha256"] as? String ?? ""
    )
  )
}
for (key, value) in products {
  packageTargets.append(
    .binaryTarget(
      name: key,
      url: "\(url)\(key)-\(version).zip",
      checksum: value["sha256"] as? String ?? ""
    )
  )
  packageTargets.append(
    .target(
      name: "\(key)\(dependencies_suffix)",
      dependencies: ([key] + (value["targets"] as? [String] ?? []).map { target in
        key.hasSuffix(debug_suffix) ? target + debug_suffix : target
      }).map { .target(name: $0) },
      path: ".Package.swift/\(key)",
      linkerSettings:
        (value["frameworks"] as? [String] ?? []).map { .linkedFramework($0) }
        + (value["libraries"] as? [String] ?? []).map { .linkedLibrary($0) }
    )
  )
}

let package = Package(
  name: "executorch",
  platforms: [
    .iOS(.v17),
    .macOS(.v10_15),
  ],
  products: products.keys.map { key in
    .library(name: key, targets: ["\(key)\(dependencies_suffix)"])
  }.sorted { $0.name < $1.name },
  targets: packageTargets
)
